// Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water),
// return the number of islands.
// An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
// You may assume all four edges of the grid are all surrounded by water.
// @see https://leetcode.com/problems/number-of-islands/description/

function numIslands(grid: string[][]): number {
    const m = grid.length
    const n = grid[0].length

    let response = 0

    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (isIsland(grid, i, j)) {
                response++
                markConnectedLand(grid, i, j)
            }
        }
    }

    return response
}

function markConnectedLand(grid: string[][], i: number, j: number) {
    if (
        ! (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length)
    ) {
        // gridの範囲外である場合は何もせずに終了
        return
    }

    if (! isIsland(grid, i, j)) {
        // 現在訪問しているノードが陸地でない場合も何もせずに終了
        return
    }

    // 以下は陸地の場合

    grid[i][j] = 'm' // 訪問済みとしてマークする
    markConnectedLand(grid, i - 1, j) // ↑ 上
    markConnectedLand(grid, i + 1, j) // ↓ 下
    markConnectedLand(grid, i, j - 1) // ← 左
    markConnectedLand(grid, i, j + 1) // → 右
}

function isIsland(grid: string[][], i: number, j: number): boolean {
    return grid[i][j] === '1'
}

const grid1 = [
    ['1', '1', '1', '1', '0'],
    ['1', '1', '0', '1', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '0', '0', '0'],
]
console.log(numIslands(grid1)) // 1

const grid2 = [
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1'],
]
console.log(numIslands(grid2)) // 3

// grid[i][j] = 'm'と、markConnectedLand(grid, i - 1, j)
// の間でconsole.log(grid)を挟むと、以下のようになる
// Example1
// grid = [
//   [ "1", "1", "1", "1", "0" ],
//   [ "1", "1", "0", "1", "0" ],
//   [ "1", "1", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "1", "1", "1", "0" ],
//   [ "1", "1", "0", "1", "0" ],
//   [ "1", "1", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "1", "1", "1", "0" ],
//   [ "m", "1", "0", "1", "0" ],
//   [ "1", "1", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "1", "1", "1", "0" ],
//   [ "m", "1", "0", "1", "0" ],
//   [ "m", "1", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "1", "1", "1", "0" ],
//   [ "m", "1", "0", "1", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "1", "1", "1", "0" ],
//   [ "m", "m", "0", "1", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "m", "1", "1", "0" ],
//   [ "m", "m", "0", "1", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "m", "m", "1", "0" ],
//   [ "m", "m", "0", "1", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "m", "m", "m", "0" ],
//   [ "m", "m", "0", "1", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]
// [
//   [ "m", "m", "m", "m", "0" ],
//   [ "m", "m", "0", "m", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "0", "0", "0" ]
// ]

// Example2
// grid = [
//   [ "1", "1", "0", "0", "0" ],
//   [ "1", "1", "0", "0", "0" ],
//   [ "0", "0", "1", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "1", "0", "0", "0" ],
//   [ "1", "1", "0", "0", "0" ],
//   [ "0", "0", "1", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "1", "0", "0", "0" ],
//   [ "m", "1", "0", "0", "0" ],
//   [ "0", "0", "1", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "1", "0", "0", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "1", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "m", "0", "0", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "1", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "m", "0", "0", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "m", "0", "0" ],
//   [ "0", "0", "0", "1", "1" ]
// ]
// [
//   [ "m", "m", "0", "0", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "m", "0", "0" ],
//   [ "0", "0", "0", "m", "1" ]
// ]
// [
//   [ "m", "m", "0", "0", "0" ],
//   [ "m", "m", "0", "0", "0" ],
//   [ "0", "0", "m", "0", "0" ],
//   [ "0", "0", "0", "m", "m" ]
// ]
